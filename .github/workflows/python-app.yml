# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Yakitabu Backend CI

on:
  push:
    branches: [ staging, main ]
  pull_request:
    branches: [ staging, main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: huaxk/postgis-action@v1
      with:
        postgresql version: '11'  # See https://https://hub.docker.com/r/mdillon/postgis for available versions, if it is not specified, use the default value 'latest'

    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Build Notifications
      if: always()
      uses: act10ns/slack@v1.2.2
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        channel: '#yakitabu-backend-build'
        status: ${{ job.status }}
        success_text: "${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build completed successfully"
        failure_text: "${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build failed"
        cancelled_text: "${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build was cancelled"
        fields: |
          [{ "title": "Repository", "value": "${env.GITHUB_REPOSITORY}", "short": true },
          { "title": "Branch", "value": "${env.GITHUB_REF}", "short": true }]
          
    - name: Test using unittest
      run: |
        python -m unittest
      env:
        TEST_TOKEN: ${{ secrets.TEST_TOKEN }}
        SQLALCHEMY_DATABASE_URI: ${{ secrets.SQLALCHEMY_DATABASE_URI}}
        EMAIL: ${{ secrets.EMAIL }}
